package com.github.edgar615.nef.param.entity;

import com.github.edgar615.entity.PersistentKit;
import com.google.common.collect.Lists;
import java.util.List;
import java.util.Map;

/**
* This class is generated by Jdbc code generator.
*
* Table : param_def
*
* @author Jdbc Code Generator
*/
public class ParamDefKit implements PersistentKit<Long, ParamDef> {

    private static final long serialVersionUID = 1L;
    
    public static final String DB_PARAM_DEF_ID = "param_def_id";
    
    public static final String DB_PARAM_GROUP_ID = "param_group_id";
    
    public static final String DB_TYPE = "type";
    
    public static final String DB_NAME = "name";
    
    public static final String DB_ALIAS = "alias";
    
    public static final String DB_REGEX = "regex";
    
    public static final String DB_MIN_LENGTH = "min_length";
    
    public static final String DB_MAX_LENGTH = "max_length";
    
    public static final String DB_PRECISION_VALUE = "precision_value";
    
    public static final String DB_MIN_VALUE = "min_value";
    
    public static final String DB_MAX_VALUE = "max_value";
    
    public static final String DB_POSSIBLE_VALUES = "possible_values";
    
    public static final String DB_DEFAULT_VALUE = "default_value";
    
    
    public static final String PARAM_DEF_ID = "paramDefId";
    
    public static final String PARAM_GROUP_ID = "paramGroupId";
    
    public static final String TYPE = "type";
    
    public static final String NAME = "name";
    
    public static final String ALIAS = "alias";
    
    public static final String REGEX = "regex";
    
    public static final String MIN_LENGTH = "minLength";
    
    public static final String MAX_LENGTH = "maxLength";
    
    public static final String PRECISION_VALUE = "precisionValue";
    
    public static final String MIN_VALUE = "minValue";
    
    public static final String MAX_VALUE = "maxValue";
    
    public static final String POSSIBLE_VALUES = "possibleValues";
    
    public static final String DEFAULT_VALUE = "defaultValue";
    
    @Override
    public List<String> fields() {
      return Lists.newArrayList(PARAM_DEF_ID,
						PARAM_GROUP_ID,
						TYPE,
						NAME,
						ALIAS,
						REGEX,
						MIN_LENGTH,
						MAX_LENGTH,
						PRECISION_VALUE,
						MIN_VALUE,
						MAX_VALUE,
						POSSIBLE_VALUES,
						DEFAULT_VALUE);
    }
    
    
    @Override
    public String primaryField() {
        return PARAM_DEF_ID;
    }

    @Override
    public void toMap(ParamDef paramDef, Map<String, Object> map) {
        if (map == null) {
            return;
        }
        
        map.put(PARAM_DEF_ID,  paramDef.getParamDefId());
        map.put(PARAM_GROUP_ID,  paramDef.getParamGroupId());
        map.put(TYPE,  paramDef.getType());
        map.put(NAME,  paramDef.getName());
        map.put(ALIAS,  paramDef.getAlias());
        map.put(REGEX,  paramDef.getRegex());
        map.put(MIN_LENGTH,  paramDef.getMinLength());
        map.put(MAX_LENGTH,  paramDef.getMaxLength());
        map.put(PRECISION_VALUE,  paramDef.getPrecisionValue());
        map.put(MIN_VALUE,  paramDef.getMinValue());
        map.put(MAX_VALUE,  paramDef.getMaxValue());
        map.put(POSSIBLE_VALUES,  paramDef.getPossibleValues());
        map.put(DEFAULT_VALUE,  paramDef.getDefaultValue());
    }

    @Override
    public void fromMap(Map<String, Object> map, ParamDef paramDef) {
        if (map == null) {
            return;
        }
        if (map.get(PARAM_DEF_ID) instanceof Long) {
            paramDef.setParamDefId((Long) map.get(PARAM_DEF_ID));
        }
        if (map.get(PARAM_GROUP_ID) instanceof Long) {
            paramDef.setParamGroupId((Long) map.get(PARAM_GROUP_ID));
        }
        if (map.get(TYPE) instanceof Integer) {
            paramDef.setType((Integer) map.get(TYPE));
        }
        if (map.get(NAME) instanceof String) {
            paramDef.setName((String) map.get(NAME));
        }
        if (map.get(ALIAS) instanceof String) {
            paramDef.setAlias((String) map.get(ALIAS));
        }
        if (map.get(REGEX) instanceof String) {
            paramDef.setRegex((String) map.get(REGEX));
        }
        if (map.get(MIN_LENGTH) instanceof Integer) {
            paramDef.setMinLength((Integer) map.get(MIN_LENGTH));
        }
        if (map.get(MAX_LENGTH) instanceof Integer) {
            paramDef.setMaxLength((Integer) map.get(MAX_LENGTH));
        }
        if (map.get(PRECISION_VALUE) instanceof Integer) {
            paramDef.setPrecisionValue((Integer) map.get(PRECISION_VALUE));
        }
        if (map.get(MIN_VALUE) instanceof Long) {
            paramDef.setMinValue((Long) map.get(MIN_VALUE));
        }
        if (map.get(MAX_VALUE) instanceof Long) {
            paramDef.setMaxValue((Long) map.get(MAX_VALUE));
        }
        if (map.get(POSSIBLE_VALUES) instanceof String) {
            paramDef.setPossibleValues((String) map.get(POSSIBLE_VALUES));
        }
        if (map.get(DEFAULT_VALUE) instanceof String) {
            paramDef.setDefaultValue((String) map.get(DEFAULT_VALUE));
        }
        
    }

   /* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/
	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/


}
